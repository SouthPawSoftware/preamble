{"name":"Preamble","tagline":"A Powerful JavaScript Unit Testing Framework","body":"\r\n# Introducing Preamble\r\n\r\n###### v1.2.0\r\n\r\nPreamble is a powerful unit testing framework for JavaScript that promotes Test Driven Development. Preamble runs in any modern HTML5 compliant browser as well as headless via PhantomJS and has no additional dependencies on any other libraries. Preamble is backed by a very powerful assertion engine that your unit tests interface with through a very simple to use but powerful API, which makes the task of authoring tests very easy and intuitive.\r\n\r\nThis is an example of a simple asynchronous test\r\n\r\n```javascript\r\ngroup('truthy', function(){\r\n    test('true === true', function(){\r\n        isTrue(true === true, 'true === true');\r\n    });\r\n});\r\n```\r\n\r\nand this is an example of a simple asynchronous test.\r\n\r\n```javascript\r\ngroup('asynchronous', function(){\r\n    asyncTest('fetch data from database via Ajaax', function(){\r\n        var promiseDone = proxy(function(){});\r\n        var promise = db.catsCollection.fetch();\r\n        promise.done(promiseDone);\r\n        whenAsyncDone(function(){\r\n            var promiseDoneInfo = promiseDone.getData();\r\n            isTrue(promiseDone.wasCalled(1), 'promiseDone was called once');\r\n            isTrue(promiseDoneInfo.argsPassed[0] !== 'undefined', 'cat collection was fetched');\r\n        });\r\n    });\r\n});\r\n```\r\n\r\n# Installing Preamble\r\nWhenever you want to create a new environment for creating and running tests just clone the repo into a folder on your computer. That's it!\r\n\r\n# Run The Sample Test\r\nAfter you have cloned the repo you can run the sample test script, javascripts/sample-test.js, by opening index.html, which is located in the repo's root folder, in your browser. All groups, tests and assertions are links and if you click on them Preamble will \"drill down\" and display details for each, respectively. To repeat the test you can either refresh the browser or click on the **Rerun All Tests** link located near the top of the page. After you have run the sample you can open up the script file in your editor and spy the code, which will give you a feel for how you can use Preamble's API to write your own scripts.\r\n\r\n# index.html\r\nThe only required tag (other than the script tags) is &lt;div id=\"preamble-container\"&gt;&lt;/div&gt;. The rendering of the results output uses a very nice serif font called Lora (thank you, [Cyreal](http://www.cyreal.org) and Google). If you don't like Lora (but who doesn't like Lora?) feel free to remove the link tag or to use a different web font.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <title>Preamble</title>\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <link href='http://fonts.googleapis.com/css?family=Lora' rel='stylesheet' type='text/css'>\r\n    <link href='stylesheets/preamble.css' rel='stylesheet' type='text/css'>\r\n</head>\r\n<body>\r\n    <!-- This is required. Do not remove or rename the id -->\r\n    <div id=\"preamble-container\"></div>\r\n\r\n    <!-- JavaScripts Go Here -->\r\n\r\n    <!-- Place script tags that your tests depend on here -->\r\n\r\n    <!-- The preamble-config.js file has to be loaded before preamble.js is loaded!!! -->\r\n    <!--\r\n    <script src=\"javascripts/preamble-config.js\"></script>\r\n    -->\r\n\r\n    <!-- preamble.js -->\r\n    <script src=\"javascripts/preamble.js\"></script>\r\n\r\n    <!-- Place your test script(s) here, immediately following preamble.js -->\r\n    <script src=\"javascripts/sample-test.js\"></script>\r\n\r\n</body>\r\n</html>\r\n```\r\n# API\r\nPlease note that when the **windowGlobals** configuration option is set to false you must preface each API method listed below with \"Preamble.\" (please see **Configuration** below). In addition, test callback functions are passed a single argument, a hash, which you must use to call assertions (please see **Assertions** below). \r\n\r\n```javascript\r\nPreamble.test('this is a test', function(assert){\r\n    assert.equal(...);\r\n    assert.notEqual(...);\r\n    assert.isTrue(...);\r\n    assert.isFalse(...);\r\n    assert.isTruthy(...);\r\n    assert.isNotTruthy(...);\r\n});\r\n```\r\n\r\n## Grouping Tests\r\n\r\n### group(label, callback(){...})\r\n### Preamble.group(label, callback(assert){...})\r\ngroup is used to group together one or more tests. **label** is a string used to uniquely identify the group. **callback** is a function which contains one or more tests. Besides containing tests, **callback** also provide closure which you can use to make data and code accessible to the tests.\r\n\r\n```javascript\r\ngroup('Does it work?', function(){\r\n    var hw = 'Hello World!';\r\n    test('Hello World!', function(){\r\n        isTrue(hw === 'Hello World!', 'Yes, it works!');\r\n    });\r\n})\r\n```\r\n\r\n### beforeEachTest(callback(){...})\r\n### Preamble.beforeEachTest(callback(){...})\r\nbeforeEachTest can be used to perform common initialization synchronously prior to calling each test. If **calback** returns a value it is passed to each test as either its 1st or 2nd parameter (for more information please see **Configuration** below). If you need to do both synchronous and asynchronous initialization before each test then use asyncBeforeEachTest (please see asyncBeforeEachTest below).\r\n\r\n```javascript\r\ngroup('2 slightly convoluted synchronous test with \"beforeEachTest\".', function(){\r\n    var count = 0;\r\n    beforeEachTest(function(){\r\n        count = 1;\r\n    });\r\n    test('Is count 1?', function(){\r\n        isFalse(count === 0, 'count doesn\\'t equal 0');\r\n        isTrue(count === 1, 'count does equal 1');\r\n        isTrue((count += 1) === 2, 'count now equals 2');\r\n    });\r\n    test('Is count still 2?', function(){\r\n        isFalse(count === 2, 'nope, it isn\\'t still 2');\r\n        isTrue(count === 1, 'now count equals 1');\r\n    });\r\n});\r\n```\r\n\r\n### afterEachTest(callback(){...})\r\n### Preamble.afterEachTest(callback(){...})\r\nafterEachTest can be used to perform common initialization synchronously after each test is called.  If you need to do both synchronous and asynchronous initialization after each test then use asyncAfterEachTest (please see asyncAfterEachTest below).\r\n\r\n```javascript\r\ngroup('2 slightly convoluted synchronous test with \"afterEachTest\".', function(){\r\n    var count = 0;\r\n    afterEachTest(function(){\r\n        count = 1;\r\n    });\r\n    test('Is count 0?', function(){\r\n        isTrue(count === 0, 'count does equal 0.');\r\n    });\r\n    test('Is count still 0?', function(){\r\n        isFalse(count === 0, 'count doesn\\'t equal 0.');\r\n        isTrue(count === 1, 'count now equals 1.');\r\n    });\r\n});\r\n```\r\n\r\n### asyncBeforeEachTest([interval,] callback(){...})\r\n### Preamble.asyncBeforeEachTest([interval,] callback(){...})\r\nasyncBeforeEachTest can be used to perform common initialization asynchronously prior to calling each test. **interval** is optional and can be used to override the default amount of time expressed in milliseconds that Preamble will wait before running the test. If **calback** returns a value it is passed to each test as either its 1st or 2nd parameter (for more information please see **Configuration** below).\r\n\r\n```javascript\r\ngroup('2 slightly convoluted asynchronous tests with \"asyncBeforeEachTest\".', function(){\r\n    var count = 0;\r\n    asyncBeforeEachTest(function(){\r\n        count = 1;\r\n    });\r\n    asyncTest('Is count 1?', function(){\r\n        setTimeout(function(){\r\n            isFalse(count === 0, 'count doesn\\'t equal 0 anymore');\r\n            isTrue(count === 1, 'count equals 1.');\r\n            count *= 10;\r\n        }, 10);\r\n\r\n        whenAsyncDone(function(){\r\n            isFalse(count === 0, 'count doesn\\'t equal 0 anymore');\r\n            isFalse(count === 1, 'count doesn\\'t equal 1 anymore');\r\n            isTrue(count === 10, 'now count equals 10');\r\n        });\r\n    });\r\n    asyncTest('Is count 10?', function(){\r\n        isFalse(count === 10, 'count doesn\\'t equals 10 anymore.');\r\n        isTrue(count === 1, 'count now equals 1 again.');\r\n        setTimeout(function(){\r\n            count *= 100;\r\n        }, 10);\r\n\r\n        whenAsyncDone(function(){\r\n            isFalse(count === 0, 'count doesn\\'t equal 0 anymore');\r\n            isFalse(count === 1, 'count doesn\\'t equal 1 anymore');\r\n            isFalse(count === 10, 'count doesn\\'t equal 10 anymore');\r\n            isTrue(count === 100, 'count now equals 100');\r\n        });\r\n    });\r\n});\r\n```\r\n\r\n### asyncAfterEachTest([interval,] callback(){...})\r\n### Preamble.asyncAfterEachTest([interval,] callback(){...})\r\nasyncAfterEachTest can be used to perform common initialization asynchronously after each test is called. **interval** is optional and can be used to override the default amount of time expressed in milliseconds that Preamble will wait before running the next test in the group. \r\n\r\n```javascript\r\ngroup('2 slightly convoluted asynchronous tests with \"asyncAfterEachTest\".', function(){\r\n    var count = 0;\r\n    asyncAfterEachTest(function(){\r\n        count = 1;\r\n    });\r\n    asyncTest('Is count 1?', function(){\r\n        setTimeout(function(){\r\n            count = 10;\r\n        }, 10);\r\n\r\n        whenAsyncDone(function(){\r\n            isFalse(count === 0, 'count doesn\\'t equal 0 anymore');\r\n            isFalse(count === 1, 'count doesn\\'t equal 1 anymore');\r\n            isTrue(count === 10, 'now count equals 10');\r\n        });\r\n    });\r\n    asyncTest('Is count still 10?', function(){\r\n        isFalse(count === 10, 'count doesn\\'t equals 10 anymore.');\r\n        isTrue(count === 1, 'count now equals 1 again.');\r\n        setTimeout(function(){\r\n            count *= 100;\r\n        }, 10);\r\n\r\n        whenAsyncDone(function(){\r\n            isTrue(count === 100, 'count now equals 100');\r\n        });\r\n    });\r\n});\r\n```\r\n\r\n## Synchronous Tests\r\n\r\n### test(label, callback([beforeTestValue]){...})\r\n### Preamble.test(label, callback(assert[,beforeTestValue]){...})\r\ntest is used to group together one or more assertions that are to be run synchronously. **label** is a string used to uniquely identify a test within a group. **callback** is a function which contains one or more assertions. Besides containing assertions, **callback** can also provide closure which you can use to make data and code accessible to the assertions. If your tests are initialized prior to being called (see beforeEachTest above) and initialization returns a value then Preamble will pass the returned value on to **callback** either as the 1st parameter if **windowGlobals** is set to true or as the 2nd parameter if **windowGlobals** is set to false (for more information please see **Configuration** below). **assert** is an object whose properties are the assertion methods (please see Assertions below).\r\n\r\n```javascript\r\ngroup('Does it work?', function(){\r\n    test('Hello World!', function(){\r\n        var hw = 'Hello World!';\r\n        isTrue(hw === 'Hello World!', 'Yes, it works!');\r\n    });\r\n});\r\n```\r\n## Asynchronous Tests\r\n\r\n### asyncTest(label, [interval,] callback([beforeTestValue]){...})\r\n### Preamble.asyncTest(label, [interval,] callback(assert[, beforeTestValue]){...})\r\nasyncTest is used to group together one or more assertions that are to be run asynchronously. **label** is a string used to uniquely identify a test within a group. **callback** is a function which contains one or more assertions. Besides containing assertions, **callback** can also provide closure which you can use to make data and code accessible to the assertions. If your tests are initialized prior to being called (see beforeEachTest above) and initialization returns a value then Preamble will pass the returned value on to **callback** either as the 1st parameter if **windowGlobals** is set to true or as the 2nd parameter if **windowGlobals** is set to false (for more information please see **Configuration** below). **assert** is an object whose properties are the assertion methods (please see Assertions below).\r\n\r\n```javascript\r\ngroup('A simple asynchronous test', function(){\r\n    asyncTest('Isn\\'t JavaScript amazing?', function(){\r\n        var val;\r\n        setTimeout(function(){\r\n            val = 'Isn\\'t JavaScript amazing?';\r\n        }, 10);\r\n        whenAsyncDone(function(){\r\n            isTrue(val === 'Isn\\'t JavaScript amazing?', 'Yest it is!');\r\n        });\r\n    });\r\n});\r\n```\r\n### whenAsyncDone(callback(){...})\r\n### Preamble.whenAsyncDone(callback(){...})\r\nwhenAsynDone starts the timer for an asyncTest. When the timer expires Preamble will then call **callback** to run the assertions for the asyncTest. \r\n\r\n## Assertions\r\nPlease note that when the **windowGlobals** configuration option is set to false test callback functions are passed a single argument, a hash, which you must use to call assertions (please see **API** above and **Configuration** below). \r\n\r\n```javascript\r\nPreamble.test('this is a test', function(assert){\r\n    assert.equal(...);\r\n    assert.notEqual(...);\r\n    assert.isTrue(...);\r\n    assert.isFalse(...);\r\n    assert.isTruthy(...);\r\n    assert.isNotTruthy(...);\r\n});\r\n```\r\n\r\n### equal(value, expectation, label)\r\nA strict deep recursive comparison of **value** and **expection**. **value** and **expectation** can be any valid JavaScript primitive value or object (including functions). When comparing objects the comparison is made such that if value === expectation && expectation === value then the result will be true. **label** is a string used to uniquely identify the assertion.\r\n\r\n### notEqual(value, expectation, label)\r\nA strict deep recursive comparison of **value** and **expection**. **value** and **expectation** can be any valid JavaScript primitive value or object (including functions). When comparing objects the comparison is made such that if value !== expectation && expectation !== value then the result will be true. **label** is a string used to uniquely identify the assertion.\r\n\r\n### isTrue(value, label)\r\nA strict boolean assertion. Result is true if **value** is true. **label** is a string used to uniquely identify the assertion.\r\n\r\n### isFalse(value, label)\r\nA strict boolean assertion. Result is true if **value** is false. **label** is a string used to uniquely identify the assertion.\r\n\r\n### isTruthy(value, label) - added v1.0.7\r\nA non strict boolean assertion. Result is true if **value** is truthy. **label** is a string used to uniquely identify the assertion.\r\n\r\n### isNotTruthy(value, label) - added v1.0.7\r\nA non strict boolean assertion. Result is true if **value** is not truthy. **label** is a string used to uniquely identify the assertion.\r\n\r\n## UI Tests\r\nPreamble adds a div element to the DOM which can be used for UI tests. This element's ID defaults to **ui-test-container** but can be overridden (please see **Configuration** below). \r\n\r\n\r\n## var pfn = proxy(someFunction) \r\n## var pfn = proxy(someObject, propertyName) \r\n## var pfn = Preamble.proxy(someFunction)\r\n## var pfn = Preamble.proxy(someObject, propertyName) \r\nproxy is used to **spy** on calls to **someFunction** or to **someObject[propertyName]**, both of which are referred to as the **wrapped function**. proxy notes how many times the wrapped function has been called and for each call to the wrapped function proxy notes the context it was called with, the arguments that were passed to it and what it returns. proxy provides an API for retrieving the information that it has accumulated.\r\n\r\nUsing proxy to spy on a function...\r\n\r\n```javascript\r\ngroup('Using proxy on a function', function(){\r\n    asyncTest('proxy(function) can tell you a lot abut a function', function(){\r\n        var fn = proxy(function(){\r\n            return 1000;\r\n        });\r\n        setTimeout(function(){\r\n            fn(1000);\r\n        }, 10);\r\n        whenAsyncDone(function(){\r\n            isTrue(fn.wasCalled(1), 'If it was called - yes it was called');\r\n            var fnInfo = fn.getData(0);\r\n            equal(fnInfo.argsPassed[0], 1000, 'It was passed 1000');\r\n            isTrue(finInfo.context === undefined, 'Its context was undefined');\r\n            equal(fnInfo.returned, 1000, 'It returned 1000');\r\n        });\r\n    });\r\n});\r\n```\r\nand to spy on a property method.\r\n\r\n```javascript\r\ngroup('Using proxy on a property method', function(){\r\n    asyncTest('proxy(someOjbect, propertyName) can tell you a lot abut a method', function(){\r\n        var someObject = {\r\n            someMethod: function(amount){\r\n                return amount;\r\n            }\r\n        };\r\n        proxy(someOjbect, 'someMethod');\r\n        setTimeout(function(){\r\n            someOjbect.someMethod(1000);\r\n        }, 10);\r\n        whenAsyncDone(function(){\r\n            isTrue(someOjbect.someMethod.wasCalled(1), 'If it was called - yes it was called');\r\n            var fnInfo = someOjbect.someMethod.getData(0);\r\n            equal(fnInfo.argsPassed[0], 1000, 'It was passed 1000');\r\n            isTrue(finInfo.context === undefined, 'Its context was undefined');\r\n            equal(fnInfo.returned, 1000, 'It returned 1000');\r\n        });\r\n    });\r\n});\r\n```\r\n### pfn.getCalledCount()\r\nReturns the total number of times that proxy was called.\r\n\r\n### pfn.getContext(n)\r\nIf n is within bounds returns the context used on the nth call to the wrapped function, otherwise returns undefined.\r\n\r\n### pfn.getArgsPassed([n])\r\nIf called with 'n' and 'n' is within bounds then returns the array found at argsPassed[n], otherwise returns argsPassed.  \r\n\r\n### pfn.getReturned([n])\r\nIf called with 'n' and 'n' is within bounds then returns value found at returned[n], otherwise returns returned.\r\n\r\n### pfn.getData(n)\r\nIf 'n' is within bounds then returns an info object, otherwise returns undefined. An info object's properties values reflect what proxy noted for that invocation of the wrapped function and include:\r\n#### count - a number that represents the invocation count - e.g. if it is 3 then the info object represents information that was noted the 3rd time the wrapped function was called.\r\n#### argsPassed -  an array whose elements are the arguments passed to the wrapped function when it was called.\r\n#### context - the context used to call the wrapped function.\r\n#### returned - what the wrapped function returned.\r\n\r\n### pfn.wasCalled([n])\r\nReturns a boolean. If you just want to know if the wrapped function was called then call wasCalled with no arguments. If you want to know if the callback was called n times then pass n as an argument.\r\n\r\n### pfn.dataIterator(callback)\r\nA higher order function that iterates through the collected data and calls **callback** with an **info** object (see pfn.getData above) for each invocation of proxy.\r\n\r\n## getUiTestContainerElement()\r\nReturns the UI test container DOM element. This element's ID defaults to **ui-test-container** but can be overridden (please see UI Tests above and **Configuration** below).\r\n\r\n```javascript\r\nvar $uiTestContainerElement = $(getUiTestContainerElement());\r\n```\r\n\r\n## getUiTestContainerElementId()\r\nReturns the id of the UI test container DOM element. This element's ID defaults to **ui-test-container** but can be overridden (please see **UI Tests** above and **Configuration** below).\r\n\r\n```javascript\r\nvar elUiTestContainerElement = \r\n    document.getElementById(getUiTestContainerElementId());\r\n```\r\n\r\n## Configuration\r\nThe following configuration options can be overridden in the preamble-config.js file located in the javascripts folder:\r\n\r\n### shortCircuit: Default value = false. Set to true to terminate upon first failure.\r\n### windowGlobals: Default value = true. Set to false if you don't want to pollute the global name space and instead use the two global vars 'Preamble' and 'assert'.\r\n### asyncTestDelay: Default value = 500. Set the value used to wait before calling whenAsyncDone's callback.\r\n### asyncBeforeAfterTestDelay: Default value = 500. Set the value used to wait before calling the test's callback (asyncBeforeEachTest) and when calling the next test's callback (asyncAfterEachTest).\r\n### name: Default value = 'Test'. Override this to display a meaningful name for your tests.\r\n### uiTestContainerId: Default value = 'ui-test-container'. Override this to use a different ID for the UI test container DOM element.\r\n\r\n## Running Headless\r\nBeginning with v1.0.6 you can run tests with Preamble headless using [PhantomJS](http://phantomjs.org). The following example assumes that you already have PhantomJS installed and that it can be found on the path.\r\n\r\n1. Open up a terminal and change to your test's root folder.\r\n2. From the command line enter \"phantomjs javascripts/phantom-runner.js index.html\".\r\n\r\n## Changes\r\nv1.2.0 - proxy completely rewritten and its API simplified. proxy can now spy on property methods and now also notes the context when the wrapped function is called.\r\nv1.1.1 - bug fix for proxy.getArgsPassed(index) which would throw an exception if argsPassed was undefined. Added check for undefined.\r\nv1.1.0 - introduces a simpler calling converntion for proxy, removing one level of indirection. Please note that this is a breaking change. To upgrade your tests please modify your calls to proxy as follows:\r\n\r\n```javascript\r\nproxy(functionToBeProxied);\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}