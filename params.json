{"name":"Preamble","tagline":"A Powerful JavaScript Unit Testing Framework","body":"# Introducing Preamble\r\nPreamble is a powerful unit testing framework for JavaScript that promotes Test Driven Development. Preamble runs in any modern HTML5 compliant browser and has no additional dependencies on any other libraries. Preamble is backed by a very powerful assertion engine that your unit tests interface with through a very simple to use but powerful API, which makes the task of authoring tests very easy and intuitive.\r\n\r\nThis is an example of a simple asynchronous test\r\n\r\n```javascript\r\ngroup('truthy', function(){\r\n    test('true === true', function(){\r\n        isTrue(true === true, 'true === true');\r\n    });\r\n});\r\n```\r\n\r\nand this is an example of a simple asynchronous test.\r\n\r\n```javascript\r\ngroup('asynchronous', function(){\r\n    asyncTest('fetch data from database via Ajaax', function(){\r\n        var catsCollection;\r\n        var prxy = proxy();\r\n        var promise = db.catscollection.fetch();\r\n        promise.done(prxy(function(collection){\r\n            catsCollection = collection;\r\n        }));      \r\n        whenAsyncDone(function(){\r\n            isTrue(prxy.wasCalled(), 'promise.done was called');\r\n            isTrue(typeof catsCollection !== 'undefined', 'cat collection was fetched');\r\n        });\r\n    });\r\n});\r\n```\r\n\r\n# Installing Preamble\r\nWhenever you want to create a new environment for creating and running tests just clone the repo into a folder on your computer. That's it!\r\n\r\n# Run The Sample Test\r\nAfter you have cloned the repo you can run the sample test script javascripts/sample-test.js which is located in the repo's root folder. To run it just load it into your browser. To run the test again you can either refresh the browser or click on the **Rerun All Tests** link which is located near the top of the page. After you have run the sample you can open up the script in your editor and spy the code which will give you a feel for how you can use Preamble's API to write your own scripts.\r\n\r\n# index.html\r\nThe only required tag (other than the script tags) is &lt;div id=\"preamble-container\"&gt;&lt;/div&gt;. The rendering of the results output uses a very nice serif font called Lora (thank you, Google). If you don't like Lora (who doesn't like Lora?) feel free to remove the link tag or to replace the font with a different web font.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <title>Preamble</title>\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <link href='http://fonts.googleapis.com/css?family=Lora' rel='stylesheet' type='text/css'>\r\n    <link href='stylesheets/preamble.css' rel='stylesheet' type='text/css'>\r\n</head>\r\n<body>\r\n    <!-- This is required. Do not remove or rename the id -->\r\n    <div id=\"preamble-container\"></div>\r\n\r\n    <!-- JavaScripts Go Here -->\r\n\r\n    <!-- Place script tags that your tests depend on here -->\r\n\r\n    <!-- The preamble-config.js file has to be loaded before preamble.js is loaded!!! -->\r\n    <!--\r\n    <script src=\"javascripts/preamble-config.js\"></script>\r\n    -->\r\n\r\n    <!-- preamble.js -->\r\n    <script src=\"javascripts/preamble.js\"></script>\r\n\r\n    <!-- Place your test script(s) here, immediately following preamble.js -->\r\n    <script src=\"javascripts/sample-test.js\"></script>\r\n\r\n</body>\r\n</html>\r\n```\r\n# API\r\n\r\n## Grouping Tests\r\n\r\n### group(label, callback)\r\ngroup is used to group together one or more tests. **label** is a string used to uniquely identify the group. **callback** is a function which contains one or more tests. Besides containing tests, **callback** also provide closure which you can use to make data and code accessible to the tests.\r\n\r\n```javascript\r\ngroup('A group providing closure', function(){\r\n    var one = 1;\r\n    var two = function(){return 2;};\r\n    test('Test #1', function(){\r\n        isTrue(one === 1, 'one does equal 1');\r\n    });\r\n    test('Test #2', function(){\r\n        isTrue(two() === 2, 'two() does equal 2');\r\n    });\r\n});\r\n```\r\n### beforeEachTest([interval,] callback)\r\nbeforeEachTest can be used to perform common initialization synchronously prior to calling each test. If **calback** returns a value it is passed to each test as either its 1st or 2nd parameter (for more information please see **configuration** below). If you need to do both synchronous and asynchronous initialization before each test then use asyncBeforeEacTest (please see asyncBeforeEachTest below).\r\n\r\n### afterEachTest(callback)\r\nafterEachTest can be used to perform common initialization synchronously after each test is called.  If you need to do both synchronous and asynchronous initialization after each test then use asyncAfterEachTest (please see asyncAfterEachTest below).\r\n\r\n### asyncBeforeEachTest([interval,] callback)\r\nasyncBeforeEachTest can be used to perform common initialization asynchronously prior to calling each test. **interval** is optional and can be used to override the default amount of time expressed in milliseconds that Preamble will wait before running the test. If **calback** returns a value it is passed to each test as either its 1st or 2nd parameter (for more information please see **configuration** below).\r\n\r\n### asyncAfterEachTest([interval,] callback)\r\nasyncAfterEachTest can be used to perform common initialization asynchronously after each test is called. **interval** is optional and can be used to override the default amount of time expressed in milliseconds that Preamble will wait before running the next test in the group. \r\n\r\n## Synchronous Tests\r\n\r\n### test(label, callback)\r\ntest is used to group together one or more assertions that are to be run synchronously. **label** is a string used to uniquely identify a test within a group. **callback** is a function which contains one or more assertions. Besides containing assertions, **callback** can also provide closure which you can use to make data and code accessible to the assertions. If your tests are initialized prior to being called (see beforeEachTest above) and initialization returns a value then Preamble will pass the returned value on to **callback** either as the 1st or 2nd parameter (for more information please see **configuration** below).\r\n\r\n```javascript\r\ngroup('2 tests providing closure', function(){\r\n    test('Test #1', function(){\r\n        var one = 1;        \r\n        isTrue(one === 1, 'one does equal 1');\r\n    });\r\n    test('Test #2', function(){\r\n        var two = function(){return 2;};\r\n        isTrue(two() === 2, 'two() does equal 2');\r\n    });\r\n});\r\n```\r\n## Asynchronous Tests\r\n\r\n### asyncTest(label, [interval,] callback)\r\nasyncTest is used to group together one or more assertions that are to be run asynchronously. **label** is a string used to uniquely identify a test within a group. **interval** is optional and can be used to override the default amount of time expressed in milliseconds that Preamble will wait before running the next test in the group. **callback** is a function which contains one or more assertions. Besides containing assertions, **callback** can also provide closure so that any code or values that are defined within the callback function are also in the assertions' scope. You must call **whenAsyncDone** (see immediately below) to register a callback that is to be called when the asyncTest's interval has expired. \r\n\r\n```javascript\r\ngroup('asynchronous', function(){\r\n    asyncTest('fetch data from database via Ajaax', function(){\r\n        var catsCollection;\r\n        var promise = db.catscollection.fetch();\r\n        promise.done(function(collection){\r\n            catsCollection = collection;\r\n        });      \r\n        whenAsyncStopped(function(){\r\n            isTrue(typeof catsCollection !== 'undefined', 'promise.done was called and the cat collection was fetched');\r\n        });\r\n    });\r\n});\r\n```\r\n### whenAsyncStopped(callback)\r\nwhenAsynDone begins the timer for an asyncTest. When the timer expires then Preamble calls **callback** to run the assertions for the asyncTest. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}