{"name":"Preamble","tagline":"A Powerful JavaScript Unit Testing Framework","body":"### Introducing Preamble\r\nPreamble is a powerful JavaScript unit testing framework that runs in any modern HTML5 compliant browser. Preamble is backed by a very powerful assertion engine that your tests interface with through a very simple to use but powerful API, which makes authoring tests very easy and intuitive.\r\nHere, for example, you can see how easy it is to write a synchronous test:\r\n\r\n```javascript\r\n    Preamble.group('truthy', function(){\r\n        Preamble.test('true === true', function(assert){\r\n            assert.isTrue(true === true, 'true === true');\r\n        });\r\n    });\r\n```\r\nAnd as the following example demonstrates, writing asynchronous tests is just as easy:\r\n\r\n```javascript\r\n    Preamble.group('asynchronous', function(){\r\n        Preamble.asyncTest('fetch data from database via Ajaax', function(assert){\r\n            var catsCollection;\r\n            var promise = db.catscollection.fetch();\r\n            promise.done(function(collection){\r\n                catsCollection = collection;\r\n            });      \r\n            Preamble.whenAsyncStopped(function(){\r\n                assert.isTrue(typeof catsCollection !== 'undefined', 'promise.done was called and the cat collection was fetched');\r\n            });\r\n        });\r\n    });\r\n```\r\n\r\n### Getting started with Preamble\r\nGetting started with Preamble is as easy as cloning the repo, changing to the directory in which the repo was cloned into, adding your test script or scripts to the index.html page and running index.html in your browser.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <title>Preamble</title>\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <link href='http://fonts.googleapis.com/css?family=Lora' rel='stylesheet' type='text/css'>\r\n    <link href='style/preamble.css' rel='stylesheet' type='text/css'>\r\n</head>\r\n<body>\r\n    <header>\r\n        <h1 id=\"header\">Name your tests here</h1>\r\n    </header>\r\n    <div class=\"container\">\r\n        <section id=\"status-container\"> </section>\r\n        <section id=\"results-container\"></section>\r\n        <div id=\"test-container\"></div>\r\n    </div>\r\n\r\n    <!-- JavaScripts Go Here -->\r\n\r\n    <!-- code and libraries needed to run tests go here -->\r\n\r\n    <!-- preamble-config.js file has to be loaded before preamble.js is loaded!!! -->\r\n    <!--\r\n    <script src=\"javascripts/preamble-config.js\"></script>\r\n    -->\r\n\r\n    <!-- preamble.js -->\r\n    <script src=\"javascripts/libs/preamble.js\"></script>\r\n\r\n    <!-- test scripts follow preamble.js -->\r\n</body>\r\n</html>\r\n```\r\n#API\r\n\r\n### group(label, callback)\r\ngroup is used to group together one or more tests. **label** is a string used to uniquely identify the group and **callback** is a function which contains one or more tests. Besides containing tests, **callback** can also provide closure so that any code or values that are defined within the callback function are also in the tests' scope.\r\n\r\n```javascript\r\n    Preamble.group('A group providing closure', function(){\r\n        var one = 1;\r\n        var two = function(){return 2;};\r\n        Preamble.test('Test #1', function(assert){\r\n            assert.isTrue(one === 1, 'one does equal 1');\r\n        });\r\n        Preamble.test('Test #2', function(assert){\r\n            assert.isTrue(two() === 2, 'two() does equal 2');\r\n        });\r\n    });\r\n```\r\n### test(label, callback)\r\ntest is used to group together one or more assertions that are to be run synchronously. **label** is a string used to uniquely identify a test within a group and **callback** is a function which contains one or more assertions. Besides containing assertions, **callback** can also provide closure so that any code or values that are defined within the callback function are also in the assertions' scope.\r\n\r\n```javascript\r\n    Preamble.group('2 tests providing closure', function(){\r\n        Preamble.test('Test #1', function(assert){\r\n            var one = 1;        \r\n            assert.isTrue(one === 1, 'one does equal 1');\r\n        });\r\n        Preamble.test('Test #2', function(assert){\r\n            var two = function(){return 2;};\r\n            assert.isTrue(two() === 2, 'two() does equal 2');\r\n        });\r\n    });\r\n```\r\n### asyncTest(label, [interval,] callback)\r\nasyncTest is used to group together one or more assertions that are to be run asynchronously. **label** is a string used to uniquely identify a test within a group. **interval** is optional and is an integer value that can be used to override the default interval for asynchronous tests. **callback** is a function which contains one or more assertions. Besides containing assertions, **callback** can also provide closure so that any code or values that are defined within the callback function are also in the assertions' scope.\r\n\r\n```javascript\r\n    Preamble.group('asynchronous', function(){\r\n        Preamble.asyncTest('fetch data from database via Ajaax', function(assert){\r\n            var catsCollection;\r\n            var promise = db.catscollection.fetch();\r\n            promise.done(function(collection){\r\n                catsCollection = collection;\r\n            });      \r\n            Preamble.whenAsyncStopped(function(){\r\n                assert.isTrue(typeof catsCollection !== 'undefined', 'promise.done was called and the cat collection was fetched');\r\n            });\r\n        });\r\n    });\r\n```\r\n### whenAsyncStopped(callback)\r\nwhenAsyncStopped is used to register a **callback** that wll be called to run one or more assertions when an asyncTest's interval has expired.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}