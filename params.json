{"name":"Preamble","tagline":"A Powerful JavaScript Unit Testing Framework","body":"# Introducing Preamble\r\nPreamble is a powerful unit testing framework for JavaScript that promotes Test Driven Development. Preamble runs in any modern HTML5 compliant browser and has no additional dependencies on any other libraries. Preamble is backed by a very powerful assertion engine that your unit tests interface with through a very simple to use but powerful API, which makes the task of authoring tests very easy and intuitive.\r\n\r\nThis is an example of a simple asynchronous test\r\n\r\n```javascript\r\ngroup('truthy', function(){\r\n    test('true === true', function(){\r\n        isTrue(true === true, 'true === true');\r\n    });\r\n});\r\n```\r\n\r\nand this is an example of a simple asynchronous test.\r\n\r\n```javascript\r\ngroup('asynchronous', function(){\r\n    asyncTest('fetch data from database via Ajaax', function(){\r\n        var catsCollection;\r\n        var prxy = proxy();\r\n        var promise = db.catscollection.fetch();\r\n        promise.done(prxy(function(collection){\r\n            catsCollection = collection;\r\n        }));      \r\n        whenAsyncDone(function(){\r\n            isTrue(prxy.wasCalled(), 'promise.done was called');\r\n            isTrue(typeof catsCollection !== 'undefined', 'cat collection was fetched');\r\n        });\r\n    });\r\n});\r\n```\r\n\r\n# Installing Preamble\r\nWhenever you want to create a new environment for creating and running tests just clone the repo into a folder on your computer. That's it!\r\n\r\n# Run The Sample Test\r\nAfter you have cloned the repo you can run the sample test script, javascripts/sample-test.js, by opening index.html, which is located in the repo's root folder, in your browser. To repeat the test you can either refresh the browser or click on the **Rerun All Tests** link located near the top of the page. After you have run the sample you can open up the script file in your editor and spy the code, which will give you a feel for how you can use Preamble's API to write your own scripts.\r\n\r\n# index.html\r\nThe only required tag (other than the script tags) is &lt;div id=\"preamble-container\"&gt;&lt;/div&gt;. The rendering of the results output uses a very nice serif font called Lora (thank you, Google). If you don't like Lora (who doesn't like Lora?) feel free to remove the link tag or to use a different web font.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <title>Preamble</title>\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <link href='http://fonts.googleapis.com/css?family=Lora' rel='stylesheet' type='text/css'>\r\n    <link href='stylesheets/preamble.css' rel='stylesheet' type='text/css'>\r\n</head>\r\n<body>\r\n    <!-- This is required. Do not remove or rename the id -->\r\n    <div id=\"preamble-container\"></div>\r\n\r\n    <!-- JavaScripts Go Here -->\r\n\r\n    <!-- Place script tags that your tests depend on here -->\r\n\r\n    <!-- The preamble-config.js file has to be loaded before preamble.js is loaded!!! -->\r\n    <!--\r\n    <script src=\"javascripts/preamble-config.js\"></script>\r\n    -->\r\n\r\n    <!-- preamble.js -->\r\n    <script src=\"javascripts/preamble.js\"></script>\r\n\r\n    <!-- Place your test script(s) here, immediately following preamble.js -->\r\n    <script src=\"javascripts/sample-test.js\"></script>\r\n\r\n</body>\r\n</html>\r\n```\r\n# API\r\n\r\n## Grouping Tests\r\n\r\n### group(label, callback)\r\ngroup is used to group together one or more tests. **label** is a string used to uniquely identify the group. **callback** is a function which contains one or more tests. Besides containing tests, **callback** also provide closure which you can use to make data and code accessible to the tests.\r\n\r\n```javascript\r\ngroup('Does it work?', function(){\r\n    var hw = 'Hello World!';\r\n    test('Hello World!', function(){\r\n        isTrue(hw === 'Hello World!', 'Yes, it works!');\r\n    });\r\n})\r\n```\r\n\r\n### beforeEachTest(callback)\r\nbeforeEachTest can be used to perform common initialization synchronously prior to calling each test. If **calback** returns a value it is passed to each test as either its 1st or 2nd parameter (for more information please see **configuration** below). If you need to do both synchronous and asynchronous initialization before each test then use asyncBeforeEachTest (please see asyncBeforeEachTest below).\r\n\r\n```javascript\r\ngroup('2 slightly convoluted synchronous test with \"beforeEachTest\".', function(){\r\n    var count = 0;\r\n    beforeEachTest(function(){\r\n        count = 1;\r\n    });\r\n    test('Is count 1?', function(){\r\n        isFalse(count === 0, 'count doesn\\'t equal 0');\r\n        isTrue(count === 1, 'count does equal 1');\r\n        isTrue((count += 1) === 2, 'count now equals 2');\r\n    });\r\n    test('Is count still 2?', function(){\r\n        isFalse(count === 2, 'nope, it isn\\'t still 2');\r\n        isTrue(count === 1, 'now count equals 1');\r\n    });\r\n});\r\n```\r\n\r\n### afterEachTest(callback)\r\nafterEachTest can be used to perform common initialization synchronously after each test is called.  If you need to do both synchronous and asynchronous initialization after each test then use asyncAfterEachTest (please see asyncAfterEachTest below).\r\n\r\n```javascript\r\ngroup('2 slightly convoluted synchronous test with \"afterEachTest\".', function(){\r\n    var count = 0;\r\n    afterEachTest(function(){\r\n        count = 1;\r\n    });\r\n    test('Is count 0?', function(){\r\n        isTrue(count === 0, 'count does equal 0.');\r\n    });\r\n    test('Is count still 0?', function(){\r\n        isFalse(count === 0, 'count doesn\\'t equal 0.');\r\n        isTrue(count === 1, 'count now equals 1.');\r\n    });\r\n});\r\n```\r\n\r\n### asyncBeforeEachTest([interval,] callback)\r\nasyncBeforeEachTest can be used to perform common initialization asynchronously prior to calling each test. **interval** is optional and can be used to override the default amount of time expressed in milliseconds that Preamble will wait before running the test. If **calback** returns a value it is passed to each test as either its 1st or 2nd parameter (for more information please see **configuration** below).\r\n\r\n```javascript\r\ngroup('2 slightly convoluted asynchronous tests with \"asyncBeforeEachTest\".', function(){\r\n    var count = 0;\r\n    asyncBeforeEachTest(function(){\r\n        count = 1;\r\n    });\r\n    asyncTest('Is count 1?', function(){\r\n        setTimeout(function(){\r\n            isFalse(count === 0, 'count doesn\\'t equal 0 anymore');\r\n            isTrue(count === 1, 'count equals 1.');\r\n            count *= 10;\r\n        }, 10);\r\n\r\n        whenAsyncDone(function(){\r\n            isFalse(count === 0, 'count doesn\\'t equal 0 anymore');\r\n            isFalse(count === 1, 'count doesn\\'t equal 1 anymore');\r\n            isTrue(count === 10, 'now count equals 10');\r\n        });\r\n    });\r\n    asyncTest('Is count 10?', function(){\r\n        isFalse(count === 10, 'count doesn\\'t equals 10 anymore.');\r\n        isTrue(count === 1, 'count now equals 1 again.');\r\n        setTimeout(function(){\r\n            count *= 100;\r\n        }, 10);\r\n\r\n        whenAsyncDone(function(){\r\n            isFalse(count === 0, 'count doesn\\'t equal 0 anymore');\r\n            isFalse(count === 1, 'count doesn\\'t equal 1 anymore');\r\n            isFalse(count === 10, 'count doesn\\'t equal 10 anymore');\r\n            isTrue(count === 100, 'count now equals 100');\r\n        });\r\n    });\r\n});\r\n```\r\n\r\n### asyncAfterEachTest([interval,] callback)\r\nasyncAfterEachTest can be used to perform common initialization asynchronously after each test is called. **interval** is optional and can be used to override the default amount of time expressed in milliseconds that Preamble will wait before running the next test in the group. \r\n\r\n```javascript\r\ngroup('2 slightly convoluted asynchronous tests with \"asyncAfterEachTest\".', function(){\r\n    var count = 0;\r\n    asyncAfterEachTest(function(){\r\n        count = 1;\r\n    });\r\n    asyncTest('Is count 1?', function(){\r\n        setTimeout(function(){\r\n            count = 10;\r\n        }, 10);\r\n\r\n        whenAsyncDone(function(){\r\n            isFalse(count === 0, 'count doesn\\'t equal 0 anymore');\r\n            isFalse(count === 1, 'count doesn\\'t equal 1 anymore');\r\n            isTrue(count === 10, 'now count equals 10');\r\n        });\r\n    });\r\n    asyncTest('Is count still 10?', function(){\r\n        isFalse(count === 10, 'count doesn\\'t equals 10 anymore.');\r\n        isTrue(count === 1, 'count now equals 1 again.');\r\n        setTimeout(function(){\r\n            count *= 100;\r\n        }, 10);\r\n\r\n        whenAsyncDone(function(){\r\n            isTrue(count === 100, 'count now equals 100');\r\n        });\r\n    });\r\n});\r\n```\r\n\r\n## Synchronous Tests\r\n\r\n### test(label, callback([beforeTestValue]) || callback(assert[, beforeTestValue]))\r\ntest is used to group together one or more assertions that are to be run synchronously. **label** is a string used to uniquely identify a test within a group. **callback** is a function which contains one or more assertions. Besides containing assertions, **callback** can also provide closure which you can use to make data and code accessible to the assertions. If your tests are initialized prior to being called (see beforeEachTest above) and initialization returns a value then Preamble will pass the returned value on to **callback** either as the 1st parameter if **windowGlobals** is set to true or as the 2nd parameter if **windowGlobals** is set to false (for more information please see **configuration** below). **assert** is an object whose properties are the assertion methods (please see Assertions below).\r\n\r\n```javascript\r\ngroup('Does it work?', function(){\r\n    test('Hello World!', function(){\r\n        var hw = 'Hello World!';\r\n        isTrue(hw === 'Hello World!', 'Yes, it works!');\r\n    });\r\n});\r\n```\r\n## Asynchronous Tests\r\n\r\n### asyncTest(label, [interval,] callback([beforeTestValue]) || callback(assert[, beforeTestValue]))\r\nasyncTest is used to group together one or more assertions that are to be run asynchronously. **label** is a string used to uniquely identify a test within a group. **callback** is a function which contains one or more assertions. Besides containing assertions, **callback** can also provide closure which you can use to make data and code accessible to the assertions. If your tests are initialized prior to being called (see beforeEachTest above) and initialization returns a value then Preamble will pass the returned value on to **callback** either as the 1st parameter if **windowGlobals** is set to true or as the 2nd parameter if **windowGlobals** is set to false (for more information please see **configuration** below). **assert** is an object whose properties are the assertion methods (please see Assertions below).\r\n\r\n```javascript\r\ngroup('A simple asynchronous test', function(){\r\n    asyncTest('Isn\\'t JavaScript amazing?', function(){\r\n        var val;\r\n        setTimeout(function(){\r\n            val = 'Isn\\'t JavaScript amazing?';\r\n        }, 10);\r\n        whenAsyncDone(function(){\r\n            isTrue(val === 'Isn\\'t JavaScript amazing?', 'Yest it is!');\r\n        });\r\n    });\r\n});\r\n```\r\n### whenAsyncStopped(callback)\r\nwhenAsynDone starts the timer for an asyncTest. When the timer expires Preamble will then call **callback** to run the assertions for the asyncTest. \r\n\r\n## Assertions\r\n\r\n### equal(value, expectation, label)\r\nA deep recursive comparison of **value** and **expection**. **value** and **expectation** can be any valid JavaScript primitive value or object (including functions). When comparing objects the comparison is made such that if value === expectation && expectation === value then the result will be true.\r\n\r\n### notEqual(value, expectation, label)\r\nA deep recursive comparison of **value** and **expection**. **value** and **expectation** can be any valid JavaScript primitive value or object (including functions). When comparing objects the comparison is made such that if value !== expectation && expectation !== value then the result will be true.\r\n\r\n### isTrue(value, label)\r\nA boolean assertion comparing **value** to true. Result is true if **value** is truthy.\r\n\r\n### isFalse(value, label)\r\nA boolean assertion comparing **value** to false. Result is true if **value** is not truthy.\r\n\r\n## UI Tests\r\nPreamble adds a div element, whose ID is ***ui-test-container**, to the DOM which can be used to perform UI tests. \r\n\r\n## Helpers/Convenience Methods\r\n\r\n### proxy()\r\nproxy is a factory method that returns a function that can wrap a callback and which can be used to determine if the callback was actually called and if the callback was called n times.\r\n\r\n```javascript\r\ngroup('Using \"proxy\" to determine if its callback was called.', function(){\r\n    asyncTest('Was callback called?', function(){\r\n        var prxy = proxy();\r\n        setTimeout(prxy(function(){\r\n        }), 10);\r\n        whenAsyncDone(function(){\r\n            isTrue(prxy.wasCalled(), 'Yest it was called!');\r\n            isFalse(prxy.wasCalled(2), 'And it was not called twice!');\r\n            isTrue(prxy.wasCalled(1), 'It was called once!');\r\n        });\r\n    });\r\n});\r\n```\r\n\r\n### getUiTestContainerElement()\r\nReturns the &lt;div id=\"ui-test-container\"&gt; element which can be used to do UI testing (please see UI Tests abouve).\r\n\r\n```javascript\r\nvar $uiTestContainerElement = $(getUiTestContainerElement());\r\n```\r\n\r\n### getUiTestContainerElementId()\r\nReturns the id of the &lt;div id=\"ui-test-container\"&gt; element which can be used to do UI testing (please see UI Tests abouve).\r\n\r\n```javascript\r\nvar elUiTestContainerElement = \r\n    document.getElementById(getUiTestContainerElementId());\r\n```\r\n\r\n## Configuration\r\nThe following configuration options can be overridden in the preamble-config.js file located in the javascripts folder:\r\n\r\n### shortCircuit: Default value = false. Set to true to terminate upon first failure.\r\n### windowGlobals: Default value = true. Set to false if you don't want to pollute the global name space and instead use the one global var 'Preamble'.\r\n### asyncTestDelay: Default value = 500. Set the value used to wait before calling whenAsyncDone's callback.\r\n### asyncBeforeAfterTestDelay: Default value = 500. Set the value used to wait before calling asyncBeforeEachTest's and asyncAfterEachTest's callbacks.\r\n### name: Default value = 'Test'. Override this to display a meaningful name for your tests.\r\n### uiTestContainerId: Default value = 'ui-test-container'. Override this to use a different id.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}